struct Node{
	int data;
	struct Node* next;
};

Node* A = NULL;
Node* temp = (Node*) malloc(sizeof(Node));
(*temp).data = 2;
(*temp).next = NULL;
A = temp;

/* alternately
Node* temp = (Node*) malloc(sizeof(Node));
temp->data = 2;
temp->next = NULL;
*/

/* C++
Node* temp = new node();
temp->data = 2;
temp->next = NULL;
*/

Node* temp = (Node*) malloc(sizeof(Node));
(*temp).data = 4;
(*temp).next = NULL;

/*Node traversal*/
Node* temp1 = A;
while(temp1->link != NULL){
	temp1 = temp1->link;
}
temp1->link = temp; // Inserting at the end of Linked list



// Reversing a link list Recursively and Iteratively
void reverse_iteratively(){
	struct Node *current, *prev, *next;
	current = head;
	prev = NULL;
	while(current != NULL){
		next = current->next;
		current->next = prev;
		prev = current;
		current = next;
	}
	head = prev;
}

void reverse_recursive(struct Node* p){
    if(p->next == NULL){
        head = p;
        return;
    }
    reverse_recursive(p->next);
    struct Node*q = p->next;
    q->next = p;
    p->next = NULL;
}


// printing a LinkedList LtoR and RtoL
//
void PrintLToR(struct Node* p){
	if(p == NULL) {printf("\n");return;}
	printf(" %d", p->data);
	PrintLToR(p->next);
}

void PrintRToL(struct Node* p){
	if(p == NULL) {printf("\n");return;}
	PrintRToL(p->next);
	printf(" %d", p->data);
}



// deleting a node at index
void Delete(int n){
	struct Node* temp1 = head;
	int i;
	if(n == 1){
		head = temp1->next;
		free(temp1);
		return;
	}
	for(i=0; i<n-2; i++)
		temp1 = temp1->next;
	
	struct Node* temp2 = temp1->next;
	temp1->next = temp2->next;
	free(temp2);
}


// Inserting node at index
void Insert(int data, int n){
	struct Node* temp1 = (struct Node*)malloc(sizeof(struct Node*));
	int i;
	
	temp1->data=data;
	if(n==1){
		temp1->next=head;
		head=temp1;
		return;
	}
	struct Node* temp2 = head;
	for(i=0; i<n-2; i++){
		temp2 = temp2->next;
	}
	temp1->next=temp2->next;
	temp2->next = temp1;
}

````````````````````````````````````````````````````````````````````
// Queue implemented by array
int IsEmpty(){
	if(front == -1 && rear == -1) return 1; // True
	else return 0; // False
}

void Enque(int x){
	if (isFull()){ // queue is full, just return
		return;
	} else 	{
		if(IsEmpty()){
			front = rear = 0;
		}
		else {
			rear = rear+1;
		}
	}
	A[rear] = x;
}

void Deque(){
	if (IsEmpty()){
		return;
	} else if (front == rear){
		front = rear = -1;
	} else {
		front = front+1;
	}
}

`````````````````````````````````````````````````````````
// Binary Tree
struct Node{
	int data;
	Node* left;
	Node* right;
};